{
  "job": "Frontend Developer",
  "name": "Wooseok Kim",
  "introduce": "Hello. I'm a developer with a passion for history, UX, and automation.<br />I believe in giving users the best experience possible, so I focus on user-centered design and intuitive interface implementation and optimization. Deployments include working with domains and SSL environments using Nginx in a Linux cloud environment.<br />And also can write automated deployment scripts via Github actions along the way, and I have experience building software in cycles via cron-tabs.",
  "title": "Career",
  "time": "Total 2 years and 2 months",
  "careers": [
    {
      "company": "Belivvr",
      "company-info": "WebXR Metaverse, AI webtoon platform",
      "position": "Position",
      "list": [
        {
          "title": "Developed Three JS + WebRTC video calling solution",
          "contents": [
            "Developed a solution using React, Nestjs, Three JS, and Typescript to provide a new calling experience for users of the then-current Metaverse core VR headset. Modified an open source library with a 1:N sender-receiver relationship and converted it to a 1:1 optimized library. Achieved a bitrate improvement of about 166% (1500 -> 4000) kbps. Then exhibited the product at Metaverse Expo, 82 Startup."
          ]
        },
        {
          "title": "AI webtoon platform service front development",
          "contents": [
            "Developed on platform service front-end development, deployment, API design, and schedule management. Aimed to create a mobile-optimized web app. Worked on the front end that users use and supported back-office work. Used Intersection Observer for infinite scrolling to naturally display large amounts of images, developed multilingual support and IP-based nationality checking."
          ]
        },
        {
          "title": "Mozilla hubs (React 3D metaverse space), Spoke (React 3D metaverse space authoring tool) open source library feature additions and refactorings",
          "contents": [
            "Worked on additional features for in-house design teams using XR space creation tools Mozilla hubs, spoke, and restored the Asset Store feature of Spoke, which was not being used due to an existing error. Added multi-language support and created a location-based 3D component that changes assets in real-time when the user swaps glft."
          ]
        },
        {
          "title": "Working with Mozilla hubs Elixir-based server APIs and resolving gimbalock errors",
          "contents": [
            "Added the ability to change a component's 3D Asset without using Spoke (a React 3D metaverse space creation tool), using only a gltf file, component ID, and Z-value. Found an error that caused 3D components to be flipped 180 degrees during operation. This error was caused by the existing spoke saving components based on Euler angles, but saving them as quaternionic angles. Added a function to change Euler angles to Quaternian angles and fixed the issue."
          ]
        }
      ]
    }
  ],
  "portfolio": {
    "title": "Portfolio",
    "list": [
      {
        "title": "Doke",
        "source": "https://github.com/vvsogi/doke",
        "badges": ["nextjs", "nestjs", "typescript", "jest", "docker", "shell"],
        "description": "Open source library for auto-documenting RESTful APIs",
        "images": [
          { "url": "/images/doke-example.png", "alt": "Doke" },
          { "url": "/images/swagger-example.png", "alt": "Swagger" }
        ],
        "contents": [
          "Doke is a library that aims to automatically document RESTful APIs. A similar library is Swagger. While communicating API documentation between companies, we realized the lack of UI aspects of Swagger and saw the need for an alternative automated documentation tool, so we built it ourselves. The library uses Nest JS's Custom Decorator and Nest js's DiscoveryModule to automatically collect the data needed to create documentation. The user only needs to write a description of each endpoint and Request Parameters and run the command to get an API Docs page with a design favorable for external publication",
          "Swagger is hard to modify when you have a UI you want to emphasize, but with Doke, it's not hard: you can clone the doke-ui package and customize it with the UI you want",
          "The library has CLI packages for building and deploying UI to increase DX. Once you get the JSON documentation via doke-nest, build an optimized webapp based on it. Since we build based on the standalone mode of Next js, the image file of doke-ui is about 10 times lighter at 182MB, while the Docker image of traditional webapps is 1GB to 2GB in size",
          "All modules in doke-nest have been written and passed tests with Jest and verified for stability."
        ]
      }
    ]
  }
}
