{
  "job": "프론트엔드 개발자",
  "name": "김우석",
  "introduce": "안녕하세요? 기록, UX, 자동화를 추구하는 개발자입니다.<br />유저에게 최대의 경험을 줄 수 있어야 한다고 생각하기에 사용자 중심 디자인과 직관적인 인터페이스 구현 및 최적화에 집중합니다.<br />리눅스 클라우드 환경에서 Nginx를 이용한 도메인 작업 및 SSL 환경을 포함한 배포가 가능합니다.<br />과정에서 Github actions를 통해 자동 배포 스크립트를 작성할 수 있으며, 크론탭을 통해 주기 반복 소프트웨어 제작 경험이 있습니다.",
  "title": "개발 경력",
  "time": "총 2년 2개월",
  "careers": [
    {
      "company": "빌리버",
      "company-info": "WebXR 메타버스, AI 웹툰 플랫폼",
      "position": "직책",
      "list": [
        {
          "title": "Three JS + WebRTC 화상 통화 솔루션 개발",
          "contents": [
            "당시 메타버스 핵심 VR 헤드셋 사용자에게 새로운 통화 경험을 제공하기 위해 React, Nestjs, Three JS, Typescript를 사용한 솔루션 개발. 송 수신자 관계가 1:N인 오픈소스 라이브러리를 수정하여 1:1 최적화 라이브러리로 전환 함. 비트레이트 개선율 약 166% (1500 -> 4000)kbps 달성함. 이후 제품을 메타버스 엑스포, 82 Startup 전시"
          ]
        },
        {
          "title": "AI 웹툰 플랫폼 서비스 프론트 개발",
          "contents": [
            "플랫폼 서비스 프론트엔드 개발, 배포, API 설계 및 일정 관리 업무를 진행. 모바일 최적화 웹앱을 만드는 것을 목표. 유저가 이용하는 프론트를 작업했으며, 백오피스 작업을 지원. 많은 양의 이미지의 자연스러운 노출을 위해 Intersection Observer를 사용해서 무한 스크롤을 적용 및 다국어 지원 및 IP 기반 국적 확인 기능들을 개발",
            "백엔드 API 설계 참여, 네이버 클라우드 서버 관리, Docker, Shell scripts를 사용한 배포 프로세스 작성. 도커 이미지 최적화로 1.97GB -> 1.03GB 이미지 사이즈 48% 축소"
          ]
        },
        {
          "title": "Mozilla hubs(React 3D 메타버스 공간), Spoke(React 3D 메타버스 공간 제작 툴) 오픈 소스 라이브러리 기능 추가 및 리팩토링",
          "contents": [
            "XR 공간 제작 툴 Mozilla hubs, spoke를 사용중인 사내 디자인 팀을 위해 추가 기능 작업 및 기존 에러로 사용되지 않고 있던 Spoke의 Asset Store기능 복원. 다국어 지원 기능 추가 및 위치 기반 3D 컴포넌트를 추가해서 유저가 glft를 교체하면 실시간으로 에셋이 변경되는 컴포넌트 제작"
          ]
        },
        {
          "title": "Mozilla hubs Elixir 기반 서버 API 작업 및 짐벌락 에러 해결",
          "contents": [
            "Spoke(React 3D 메타버스 공간 제작 툴)를 사용하지 않고 gltf 파일과 컴포넌트 ID, Z값 만으로 해당 컴포넌트의 3D Asset을 변경시키는 기능 추가. 작업 중 3D 컴포넌트가 180도 뒤집어져 생성이 되는 에러 발견. 이 에러는 기존 spoke에서 오일러 각을 기반 컴포넌트를 저장할 때는 쿼터니안 각으로 저장하기 때문에 발생한 문제. 오일러 각을 쿼터니안 각으로 변경시키는 함수 추가 후 문제 해결."
          ]
        }
      ]
    }
  ],
  "portfolio": {
    "title": "포트폴리오",
    "list": [
      {
        "title": "Doke (도케)",
        "source": "https://github.com/vvsogi/doke",
        "badges": ["nextjs", "nestjs", "typescript", "jest", "docker", "shell"],
        "description": "RESTful API 자동 문서화 오픈소스 라이브러리",
        "images": [
          { "url": "/images/doke-example.png", "alt": "Doke" },
          { "url": "/images/swagger-example.png", "alt": "Swagger" }
        ],
        "contents": [
          "Doke는 RESTful API 자동 문서화를 목표로 탄생한 라이브러리입니다. 비슷한 라이브러리로 Swagger가 있습니다. 회사간 API 문서 전달 과정에서 Swagger의 UI 측면의 부족함을 느끼고 이를 대체할만한 자동 문서화 도구의 필요성을 감지했고, 이를 직접 제작했습니다. 해당 라이브러리는 Nest JS의 Custom Decorator와 Nest js의 DiscoveryModule을 사용해서 문서 제작에 필요한 데이터들을 자동으로 수집합니다. 사용자는 각 엔드포인트의 설명 및 Request Parameter에 대한 설명만을 작성하고 명령어를 실행하면 외부 공개에 유리한 디자인을 가진 API Docs 페이지를 얻을 수 있습니다.",
          "Swagger는 강조하고 싶은 UI가 있을 때 이를 수정하기 어렵지만, Doke를 사용한다면 어렵지 않습니다. doke-ui package를 클론 한 후 원하는 UI로 커스터마이징 할 수 있습니다.",
          "해당 라이브러리는 DX를 높이기 위해 UI 빌드 및 배포에 대한 CLI 패키지를 제작 및 배포되어 있습니다. doke-nest를 통해 JSON 문서를 얻었다면 이를 기반으로 최적화된 웹앱을 빌드합니다. Next js의 standalone 모드를 기반으로 빌드하기 때문에 기존 웹앱들의 Docker image 용량이 1GB ~ 2GB인 반면, doke-ui의 이미지 파일은 182MB로 약 10배 가볍습니다.",
          "doke-nest의 모든 모듈은 Jest를 통해 테스트 작성 및 통과했으며 안정성을 검증했습니다."
        ]
      }
    ]
  }
}
